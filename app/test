// `commit f60c9777cd3db153b848dd8720a7cde459d59162
// Author: giorgi.surmanidze <giorgi.surmanidze@scandiweb.com>
// Date:   Tue Feb 11 11:57:09 2025 +0400

//     Re-adding untracked files after reset

// diff --git a/.env b/.env
// new file mode 100644
// index 0000000..3828965
// --- /dev/null
// +++ b/.env
// @@ -0,0 +1 @@
// +API_BASE_URL=http://localhost:8000/api/
// \ No newline at end of file
// diff --git a/app/(otherPages)/contact/page.jsx b/app/(otherPages)/contact/page.jsx
// new file mode 100644
// index 0000000..8d2d143
// --- /dev/null
// +++ b/app/(otherPages)/contact/page.jsx
// @@ -0,0 +1,16 @@
// +import ContactForm from "@/components/othersPages/contact/ContactForm";
// +import Map from "@/components/othersPages/contact/Map";
// +import React from "react";
// +export default function page() {
// +  return (
// +    <>
// +      <div className="tf-page-title style-2">
// +        <div className="container-full">
// +          <div className="heading text-center">Contact Us</div>
// +        </div>
// +      </div>
// +      <Map />
// +      <ContactForm />
// +    </>
// +  );
// +}
// diff --git a/app/(otherPages)/reset-password/page.jsx b/app/(otherPages)/reset-password/page.jsx
// new file mode 100644
// index 0000000..6d44982
// --- /dev/null
// +++ b/app/(otherPages)/reset-password/page.jsx
// @@ -0,0 +1,99 @@
// +"use client";
// +import { useMemo } from "react";
// +import { useRouter, useSearchParams } from "next/navigation";
// +import * as yup from "yup";
// +import { useForm } from "react-hook-form";
// +import { yupResolver } from "@hookform/resolvers/yup";
// +import axiosInstance from "@/config/axios";
// +import { ToastContainer, toast } from "react-toastify";
// +
// +export default function Page() {
// +  const searchParams = useSearchParams();
// +  const email = searchParams.get("email");
// +  const token = searchParams.get("token");
// +
// +  const validationSchema = useMemo(() => {
// +    return yup.object().shape({
// +      password: yup
// +        .string()
// +        .min(6, "Password must be at least 6 characters")
// +        .required("Password is required"),
// +      confirm_password: yup
// +        .string()
// +        .oneOf([yup.ref("password"), null], "Passwords must match")
// +        .required("Confirm password is required"),
// +    });
// +  }, []);
// +
// +  const {
// +    register,
// +    handleSubmit,
// +    formState: { errors },
// +    reset,
// +  } = useForm({
// +    resolver: yupResolver(validationSchema),
// +  });
// +
// +  const router = useRouter();
// +
// +  const onSubmit = async (data) => {
// +    const validatedData = {
// +      password: data["password"],
// +      password_confirmation: data["confirm_password"],
// +      email: email,
// +      token: token,
// +    };
// +    try {
// +      await axiosInstance.post("reset-password", validatedData);
// +      reset();
// +      toast.success("Password changed succesfully.", {
// +        position: "top-right",
// +        autoClose: 3000,
// +      });
// +      setTimeout(() => {
// +        router.push("/login");
// +      }, 2000);
// +    } catch (error) {
// +      console.error("Error:", error);
// +    }
// +  };
// +
// +  return (
// +    <div className="container password-change-page">
// +      <form onSubmit={handleSubmit(onSubmit)}>
// +        <h5>Please enter new password</h5>
// +        <ToastContainer />
// +        <div className="tf-field style-1 mb_15">
// +          <input
// +            className="tf-field-input tf-input"
// +            placeholder=" "
// +            type="password"
// +            {...register("password")}
// +          />
// +          <label className="tf-field-label">Password *</label>
// +          <p className="error">{errors.password?.message}</p>
// +        </div>
// +
// +        <div className="tf-field style-1 mb_15">
// +          <input
// +            className="tf-field-input tf-input"
// +            placeholder=" "
// +            type="password"
// +            {...register("confirm_password")}
// +          />
// +          <label className="tf-field-label">Confirm Password *</label>
// +          <p className="error">{errors.confirm_password?.message}</p>
// +        </div>
// +
// +        <div className="">
// +          <button
// +            type="submit"
// +            className="tf-btn w-100 radius-3 btn-fill animate-hover-btn justify-content-center"
// +          >
// +            Change Password
// +          </button>
// +        </div>
// +      </form>
// +    </div>
// +  );
// +}
// diff --git a/app/(otherPages)/success/page.jsx b/app/(otherPages)/success/page.jsx
// new file mode 100644
// index 0000000..eda6de1
// --- /dev/null
// +++ b/app/(otherPages)/success/page.jsx
// @@ -0,0 +1,28 @@
// +"use client"
// +import { useEffect } from "react";
// +import { useSearchParams } from "next/navigation";
// +import axios from "axios";
// +
// +export default function page() {
// +  const searchParams = useSearchParams();
// +  const email = searchParams.get("email");
// +
// +  useEffect(() => {
// +    if (email) {
// +      axios
// +        .post("http://localhost:8000/api/email/verify", { email })
// +        .then((response) => {
// +          console.log("Verification successful:", response.data);
// +        })
// +        .catch((error) => {
// +          console.error("Error verifying email:", error);
// +        });
// +    }
// +  }, [email]);
// +
// +  return (
// +    <div className="success-page">
// +      <h3>Verification completed successfully!</h3>
// +    </div>
// +  );
// +}
// diff --git a/app/(otherPages)/verification-status/page.jsx b/app/(otherPages)/verification-status/page.jsx
// new file mode 100644
// index 0000000..586d858
// --- /dev/null
// +++ b/app/(otherPages)/verification-status/page.jsx
// @@ -0,0 +1,10 @@
// +"use client";
// +export default function page() {
// +  return (
// +    <div className="success-page">
// +      <h4>
// +        Please check your <b>email</b> to reset your password!
// +      </h4>
// +    </div>
// +  );
// +}
// diff --git a/app/(shop-details)/shop-default/page.jsx b/app/(shop-details)/shop-default/page.jsx
// new file mode 100644
// index 0000000..3e3b6f8
// --- /dev/null
// +++ b/app/(shop-details)/shop-default/page.jsx
// @@ -0,0 +1,22 @@
// +"use client";
// +import ShopDefault from "@/components/shop/ShopDefault";
// +import { useGetCategory } from "@/hooks/useCategory";
// +import { useSearchParams } from "next/navigation";
// +import React from "react";
// +export default function page() {
// +  const searchParams = useSearchParams();
// +  const category = searchParams.get("category");
// +  const categoryId = searchParams.get("id");
// +
// +  const { data } = useGetCategory(categoryId);
// +  return (
// +    <>
// +      <div className="tf-page-title">
// +        <div className="container-full">
// +          <div className="heading text-center">{category}</div>
// +        </div>
// +      </div>
// +      <ShopDefault data={data?.services} />
// +    </>
// +  );
// +}
// diff --git a/config/axios/index.js b/config/axios/index.js
// new file mode 100644
// index 0000000..b6f3231
// --- /dev/null
// +++ b/config/axios/index.js
// @@ -0,0 +1,13 @@
// +import axios from "axios";
// +
// +const axiosInstance = axios.create({
// +  baseURL: "http://localhost:8000/api/",
// +  headers: {
// +    Accept: "application/json",
// +    "Content-Type": "application/json",
// +    "X-Requested-With": "XMLHttpRequest",
// +    Authorization: "Bearer " + localStorage.getItem("jwt_token"),
// +  },
// +});
// +
// +export default axiosInstance;
// diff --git a/context/AuthContext.jsx b/context/AuthContext.jsx
// new file mode 100644
// index 0000000..a44c65b
// --- /dev/null
// +++ b/context/AuthContext.jsx
// @@ -0,0 +1,34 @@
// +import { createContext, useState, useEffect, useContext } from "react";
// +
// +const AuthContext = createContext();
// +
// +export const AuthProvider = ({ children }) => {
// +  const [user, setUser] = useState(null);
// +
// +  useEffect(() => {
// +    const storedUser = localStorage.getItem("user");
// +    if (storedUser) {
// +      setUser(JSON.parse(storedUser));
// +    }
// +  }, []);
// +
// +  const login = (userData, token) => {
// +    localStorage.setItem("jwt_token", token);
// +    localStorage.setItem("user", JSON.stringify(userData));
// +    setUser(userData);
// +  };
// +
// +  const logout = () => {
// +    localStorage.removeItem("jwt_token");
// +    localStorage.removeItem("user");
// +    setUser(null);
// +  };
// +
// +  return (
// +    <AuthContext.Provider value={{ user, login, logout }}>
// +      {children}
// +    </AuthContext.Provider>
// +  );
// +};
// +
// +export const useAuth = () => useContext(AuthContext);
// diff --git a/hooks/useCategory.js b/hooks/useCategory.js
// new file mode 100644
// index 0000000..c1c4516
// --- /dev/null
// +++ b/hooks/useCategory.js
// @@ -0,0 +1,12 @@
// +import axios from "@/config/axios";
// +import { useQuery } from "@tanstack/react-query";
// +
// +export const useGetCategory = (categoryId) => {
// +  return useQuery({
// +    queryKey: ["category", categoryId],
// +    queryFn: async () => {
// +      const response = await axios.get(`categories/${categoryId}`);
// +      return response.data;
// +    },
// +  });
// +};
// diff --git a/hooks/useGetCategories.js b/hooks/useGetCategories.js
// new file mode 100644
// index 0000000..25253ec
// --- /dev/null
// +++ b/hooks/useGetCategories.js
// @@ -0,0 +1,12 @@
// +import axios from "@/config/axios";
// +import { useQuery } from "@tanstack/react-query";
// +
// +export const useGetCategories = () => {
// +  return useQuery({
// +    queryKey: ["categories"],
// +    queryFn: async () => {
// +      const response = await axios.get(`/categories`);
// +      return response.data;
// +    },
// +  });
// +};
// diff --git a/hooks/useGetEmployees.js b/hooks/useGetEmployees.js
// new file mode 100644
// index 0000000..51fbea1
// --- /dev/null
// +++ b/hooks/useGetEmployees.js
// @@ -0,0 +1,12 @@
// +import axios from "@/config/axios";
// +import { useQuery } from "@tanstack/react-query";
// +
// +export const useGetEmployees = () => {
// +  return useQuery({
// +    queryKey: ["employees"],
// +    queryFn: async () => {
// +      const response = await axios.get(`employees`);
// +      return response.data;
// +    },
// +  });
// +};
// diff --git a/hooks/useGetProductFromCart.js b/hooks/useGetProductFromCart.js
// new file mode 100644
// index 0000000..a2f6cf2
// --- /dev/null
// +++ b/hooks/useGetProductFromCart.js
// @@ -0,0 +1,13 @@
// +import axios from "@/config/axios";
// +import { useQuery } from "@tanstack/react-query";
// +
// +export const useGetProductFromCart = () => {
// +  return useQuery({
// +    queryKey: ["productsFromCart"],
// +    queryFn: async () => {
// +      const response = await axios.get(`cart/view`);
// +      console.log(response)
// +      return response.data;
// +    },
// +  });
// +};
// diff --git a/hooks/useGetService.js b/hooks/useGetService.js
// new file mode 100644
// index 0000000..a6ffb17
// --- /dev/null
// +++ b/hooks/useGetService.js
// @@ -0,0 +1,12 @@
// +import axios from "@/config/axios";
// +import { useQuery } from "@tanstack/react-query";
// +
// +export const useGetService = (serviceId) => {
// +  return useQuery({
// +    queryKey: ["service", serviceId],
// +    queryFn: async () => {
// +      const response = await axios.get(`services/${serviceId}`);
// +      return response.data;
// +    },
// +  });
// +};
// diff --git a/hooks/useGetServices.js b/hooks/useGetServices.js
// new file mode 100644
// index 0000000..647406c
// --- /dev/null
// +++ b/hooks/useGetServices.js
// @@ -0,0 +1,12 @@
// +import axios from "@/config/axios";
// +import { useQuery } from "@tanstack/react-query";
// +
// +export const useGetServices = () => {
// +  return useQuery({
// +    queryKey: ["services"],
// +    queryFn: async () => {
// +      const response = await axios.get(`/services`);
// +      return response.data?.services;
// +    },
// +  });
// +};
// diff --git a/public/images/item/ballot.png b/public/images/item/ballot.png
// new file mode 100644
// index 0000000..3b97b2a
// Binary files /dev/null and b/public/images/item/ballot.png differ
// diff --git a/public/images/logo/banner.avif b/public/images/logo/banner.avif
// new file mode 100644
// index 0000000..689fe8d
// Binary files /dev/null and b/public/images/logo/banner.avif differ
// diff --git a/public/images/logo/businessman-hand-holding-blocks.jpeg b/public/images/logo/businessman-hand-holding-blocks.jpeg
// new file mode 100644
// index 0000000..d2c00d4
// Binary files /dev/null and b/public/images/logo/businessman-hand-holding-blocks.jpeg differ
// diff --git a/public/images/logo/circle-user.png b/public/images/logo/circle-user.png
// new file mode 100644
// index 0000000..34879b6
// Binary files /dev/null and b/public/images/logo/circle-user.png differ
// diff --git a/public/images/logo/established.jpg b/public/images/logo/established.jpg
// new file mode 100644
// index 0000000..902538a
// Binary files /dev/null and b/public/images/logo/established.jpg differ
// diff --git a/public/images/logo/ibccs logo.avif b/public/images/logo/ibccs logo.avif
// new file mode 100644
// index 0000000..4861ffb
// Binary files /dev/null and b/public/images/logo/ibccs logo.avif differ
// diff --git a/public/images/logo/image-2500x500.jpg b/public/images/logo/image-2500x500.jpg
// new file mode 100644
// index 0000000..79d3436
// Binary files /dev/null and b/public/images/logo/image-2500x500.jpg differ
// diff --git a/public/images/logo/image-3500x700.jpg b/public/images/logo/image-3500x700.jpg
// new file mode 100644
// index 0000000..3e77831
// Binary files /dev/null and b/public/images/logo/image-3500x700.jpg differ
// diff --git a/public/images/logo/sign-out.png b/public/images/logo/sign-out.png
// new file mode 100644
// index 0000000..3ba1780
// Binary files /dev/null and b/public/images/logo/sign-out.png differ
// diff --git a/public/images/logo/visa.png b/public/images/logo/visa.png
// new file mode 100644
// index 0000000..c7feea9
// Binary files /dev/null and b/public/images/logo/visa.png differ
// diff --git a/public/images/slider/banner.avif b/public/images/slider/banner.avif
// new file mode 100644
// index 0000000..689fe8d
// Binary files /dev/null and b/public/images/slider/banner.avif differ
// diff --git a/public/images/slider/is-service-revenue-an-asset.webp b/public/images/slider/is-service-revenue-an-asset.webp
// new file mode 100644
// index 0000000..45e44cd
// Binary files /dev/null and b/public/images/slider/is-service-revenue-an-asset.webp differ
